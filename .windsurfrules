# Project Guidelines and Best Practices

## 1. Project Structure and Organization

### 1.1 Context-Awareness (CRITICAL)
- Always maintain system integrity and functionality
- Ensure backward compatibility unless explicitly instructed otherwise
- Review entire codebase before modifications
- Preserve existing features; implement new ones without breaking old
- Analyze potential impacts before changes
- Use HOCs and React Hooks for new features
- Edit code in a focused, context-aware manner

### 1.2 Feature Isolation
- Implement major features in dedicated `src/features/` directories
- Use modular component structure
- Import feature modules into main application as needed

### 1.3 File Placement
- Route definitions in `src/app/` (Next.js App Router conventions)
- Feature-specific directories (e.g., `src/features/water-quality/`)
- Maintain clear, logical directory structure

## 2. Coding Practices

### 2.1 Hard Coding Prohibition
- Never hard-code values, configurations, or sensitive information
- Use environment variables (`process.env`) for configurable values
- Store sensitive information in `.env.local` files
- Utilize Next.js built-in environment variable protection

## 3. Configuration and Environment

### 3.1 Dependency Management
- Maintain up-to-date `package.json`
- Use exact versions of dependencies
- Regularly run `npm audit` and `npm outdated`
- Implement Dependabot for automated updates

## 4. Code Quality and Best Practices

### 4.1 Code Review Guidelines
- Peer review all code changes
- Follow ESLint and Prettier configurations
- Use TypeScript with strict mode
- Write clear, descriptive names
- Provide comprehensive JSDoc comments
- Implement unit and integration tests (Jest, React Testing Library)

### 4.2 Error Handling
- Implement robust React error boundaries
- Use TypeScript for compile-time type checking
- Centralize error logging (e.g., Sentry)
- Create custom error classes
- Provide user-friendly error messages

## 5. Security Considerations

### 5.1 Input Validation
- Use Zod or TypeScript for runtime type validation
- Implement server-side authentication checks
- Use NextAuth.js for secure authentication
- Implement role-based access control (RBAC)

### 5.2 Sensitive Data Protection
- Never expose sensitive information client-side
- Use server-side rendering for sensitive data
- Implement secure password hashing (bcrypt)
- Use HTTPS and secure cookies
- Implement CSRF protection (Next.js built-in)

## 6. Performance and Optimization

### 6.1 Database Interactions
- Use Prisma ORM for type-safe queries
- Implement database indexing
- Use server-side caching strategies
- Minimize database round trips
- Implement pagination and lazy loading

### 6.2 Code Efficiency
- Utilize React Server Components
- Implement code splitting and lazy loading
- Use memoization (React.memo, useMemo)
- Profile and optimize critical paths
- Minimize re-renders with efficient state management

## 7. State Management
- Prefer React Context and Hooks for simple state
- Use Zustand or Redux for complex global state
- Implement efficient state update strategies
- Use immutable state updates

## 8. Documentation

### 8.1 Code Documentation
- Maintain comprehensive README.md
- Document project setup and instructions
- Keep inline comments clear and concise
- Generate API documentation (TypeDoc)
- Update documentation with each significant change

## 9. UX/UI Design Principles

### 9.1 Consistent Design
- Use consistent design system (e.g., Tailwind CSS)
- Create reusable component libraries
- Ensure responsive design across devices
- Implement accessibility best practices (WCAG)
- Use design tokens for consistent styling

Note: These guidelines should be regularly reviewed and updated to reflect evolving project needs and industry best practices.