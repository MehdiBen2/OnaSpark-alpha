# Windsurf Workplace Coding Guidelines

-YOU ARE BASED ON the new CHATGPT o3-mini(high) a reasoning modele

## 1. Project Structure and Organization
### 1.1 Cascade must always be Context-Aware : !IMPORTANT!
- Double-check to ensure no functionality is overlooked or unintentionally removed
- Maintain the overall system integrity and keep everything functional
- Ensure backward compatibility unless explicitly instructed otherwise
- When editing existing Python, HTML, or any other code, Cascade must thoroughly review the entire codebase to understand the context and existing features
- Cascade should never delete existing features or break functionality
- Ensure all modifications are made with full awareness of the codebase's structure and interdependencies !important!
- Before making changes, analyze potential impacts on other parts of the code !important
- Preserve existing functionality while implementing new features or modifications when needed or replace them when asked to or in the context of it
- If a change might affect existing features, Cascade should highlight this and seek confirmation before proceeding
- Always be mindful of the context of the codebase, including existing features and new features being added !important
- Ensure that new features are compatible with old features and that nothing is broken
- Use decorators to add new features and avoid hardcoding values or behavior
- Cascade will do edits in a focused and targeted manner, after scanning the code to know the context of the file code
### 1.3 Feature Isolation
- Each major feature MUST be implemented in its own dedicated Python file, separate from `app.py` This promotes modularity, maintainability, and easier testing
- Import feature modules into `app.py` as needed, keeping the main application file clean and organized

### 1.2 File Placement
- All URL endpoints MUST be defined in `url_endpoints.py`
- Each feature should have its dedicated feature-specific file (e.g., `water_quality.py` for water quality-related functionality)
- Maintain a clear and logical directory structure

## 2. Coding Practices
### 2.1 Hard Coding Prohibition
- NEVER hard-code values, configurations, or sensitive information
- Use environment variables, configuration files, or constants for all configurable values
- Sensitive information (API keys, credentials) must be stored in `.env` files or secure configuration management

## 3. Configuration and Environment
### 3.1 Dependency Management
- Maintain an up-to-date `requirements.txt` file
- Pin specific versions of dependencies
- Regularly update and audit dependencies for security and compatibility

## 4. Code Quality and Best Practices
### 4.1 Code Review Guidelines
- All code changes must go through a peer review process
- Follow PEP 8 style guidelines for Python code
- Use type annotations and maintain high code readability
- Write comprehensive docstrings for all functions and classes

### 4.2 Error Handling
- Implement robust error handling and logging
- Use specific exception types
- Log errors with sufficient context for debugging

## 5. Security Considerations

### 5.1 Input Validation
- Implement proper authentication and authorization checks

### 5.2 Sensitive Data Protection
- Never log or expose sensitive information
- Use secure hashing for passwords
- Implement proper access controls

## 6. Performance and Optimization
### 6.1 Database Interactions
- Use database indexing and query optimization techniques
- Implement caching where appropriate
- Minimize database round trips

### 6.2 Code Efficiency
- Avoid unnecessary computations
- Use list comprehensions and generator expressions
- Profile and optimize performance-critical code paths


## 8. Documentation
### 8.1 Code Documentation
- Maintain a comprehensive README.md
- Document dependencies, and running instructions
- Keep inline comments clear and concise
- Update documentation with each significant change

### 9. UX/UI Design Principles
9.1 Consistent Layout and Design , use same design as other templates in our app
Use a consistent layout across all pages.
Ensure responsive design for different screen sizes.


---
**Note**: These guidelines are living documents. They should be regularly reviewed and updated to reflect the evolving needs of the project and best practices in software development.